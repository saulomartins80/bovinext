// backend/src/controllers/chatbotController.ts
import { Request, Response } from 'express';
import AIService from '../services/aiService';
import { ChatHistoryService } from '../services/chatHistoryService';
import { UserService } from '../modules/users/services/UserService';
import { SubscriptionService } from '../services/subscriptionService';
import { AnalyticsService } from '../services/analyticsService';
import { ChatbotRPAService } from '../rpa/services/ChatbotRPAService';
import { db } from '../rpa/core/MemoryDB';
import { detectUserIntent } from '../controllers/automatedActionsController';
import { v4 as uuidv4 } from 'uuid';

interface ChatbotResponse {
  response: string;
  action?: {
    type: string;
    payload: any;
    confidence: number;
  };
  requiresConfirmation?: boolean;
  followUpQuestions?: string[];
  rpaAction?: any;
  recommendations?: any[];
  nextSteps?: string[];
}

export class ChatbotController {
  private static instance: ChatbotController;
  private aiService: AIService;
  private chatHistoryService: ChatHistoryService;
  private userService: UserService;
  private subscriptionService: SubscriptionService;
  private analyticsService: AnalyticsService;
  private chatbotRPAService: ChatbotRPAService;
  private responseCache: Map<string, ChatbotResponse> = new Map();

  private constructor() {
    this.aiService = new AIService(); // Corrigido: usar new em vez de getInstance
    this.chatHistoryService = new ChatHistoryService();
    // @ts-ignore - Ignorar erro de inje√ß√£o de depend√™ncia temporariamente
    this.userService = new UserService();
    // @ts-ignore
    this.subscriptionService = new SubscriptionService({ findById: async () => null });
    this.analyticsService = new AnalyticsService();
    this.chatbotRPAService = ChatbotRPAService.getInstance();
  }

  static getInstance(): ChatbotController {
    if (!ChatbotController.instance) {
      ChatbotController.instance = new ChatbotController();
    }
    return ChatbotController.instance;
  }

  async processMessage(req: Request, res: Response): Promise<void> {
    const startTime = Date.now();
    try {
      const { chatId, message } = req.body;
      
      // ‚úÖ CORRE√á√ÉO: Extrair userId do req.user (autentica√ß√£o)
      const userId = req.user?.uid || req.user?.firebaseUid || req.user?._id;
      
      if (!userId) {
        console.error('[ChatbotController] ‚ùå Usu√°rio n√£o autenticado');
        res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
        return;
      }

      const realChatId = chatId || uuidv4();

      console.log(`[ChatbotController] Processando mensagem para usu√°rio ${userId}, chatId: ${realChatId}`);

      // 1. Verificar cache primeiro
      const cacheKey = `${userId}_${message}_${realChatId}`;
      const cachedResponse = this.responseCache.get(cacheKey);
      
      if (cachedResponse) {
        console.log(`‚ö° Cache hit para mensagem: ${Date.now() - startTime}ms`);
        await this.saveMessageToHistory(realChatId, userId, message, cachedResponse.response);
        res.json(cachedResponse);
        return;
      }

      // 2. Carregar dados do usu√°rio em paralelo
      const [userData, subscriptionStatus] = await Promise.all([
        this.loadUserData(userId),
        this.subscriptionService.getUserSubscription(userId)
      ]);

      // 3. Carregar hist√≥rico de conversa (opcional)
      let conversationHistory;
      try {
        conversationHistory = await this.chatHistoryService.getConversation(realChatId);
      } catch (error) {
        console.log('[ChatbotController] Nenhum hist√≥rico encontrado, iniciando nova conversa');
        conversationHistory = { messages: [] };
      }

      // 4. Detectar intent simplificado
      const intentResult = await detectUserIntent(message, {
        name: userData.name || 'Usu√°rio',
        subscriptionPlan: (subscriptionStatus as any)?.plan || 'free',
        totalTransacoes: userData.totalTransacoes || 0,
        totalInvestimentos: userData.totalInvestimentos || 0,
        totalMetas: userData.totalMetas || 0
      }, conversationHistory?.messages);

      // 5. Processar resposta simples
      let finalResponse: ChatbotResponse;
      
      if (intentResult && intentResult.confidence > 0.5) {
        // Resposta baseada no intent detectado
        finalResponse = {
          response: intentResult.response || 'Entendi sua solicita√ß√£o. Como posso ajudar?',
          requiresConfirmation: intentResult.requiresConfirmation || false
        };
      } else {
        // Resposta padr√£o para mensagens n√£o reconhecidas
        finalResponse = {
          response: 'Ol√°! Sou o assistente Finn. Como posso te ajudar hoje? Posso responder d√∫vidas sobre finan√ßas, investimentos, metas e muito mais!',
          requiresConfirmation: false
        };
      }

      // 6. Salvar no cache
      this.responseCache.set(cacheKey, finalResponse);

      // 7. Salvar mensagem no hist√≥rico
      await this.saveMessageToHistory(realChatId, userId, message, finalResponse.response);

      // 8. Atualizar analytics
      this.analyticsService.updateUserAnalytics(userId, 'basic');

      const totalTime = Date.now() - startTime;
      console.log(`[ChatbotController] Resposta processada em ${totalTime}ms`);

      res.json({
        success: true,
        message: finalResponse.response,
        metadata: {
          action: finalResponse.action,
          requiresConfirmation: finalResponse.requiresConfirmation,
          followUpQuestions: finalResponse.followUpQuestions,
          rpaAction: finalResponse.rpaAction,
          recommendations: finalResponse.recommendations,
          nextSteps: finalResponse.nextSteps,
          messageId: `msg-${Date.now()}-${Math.random()}`
        }
      });

    } catch (error) {
      console.error('‚ùå Erro no processamento da mensagem:', error);
      res.status(500).json({
        success: false,
        message: 'Desculpe, tive um problema t√©cnico. Pode tentar novamente?',
        error: error.message
      });
    }
  }

  // ü§ñ PROCESSAMENTO COM RPA
  private async processActionWithRPA(intentResult: any, userData: any, userId: string): Promise<ChatbotResponse> {
    const { type, payload, confidence } = intentResult;

    try {
      // Mapear intents para a√ß√µes RPA
      const rpaAction = this.mapIntentToRPAAction(type, payload, userId);
      
      if (rpaAction) {
        console.log(`ü§ñ Executando a√ß√£o RPA: ${rpaAction.type}`);
        
        // Executar a√ß√£o via RPA
        const rpaResult = await this.chatbotRPAService.processChatbotAction(rpaAction);
        
        if (rpaResult.success) {
          return {
            response: rpaResult.message,
            action: {
              type: type,
              payload: payload,
              confidence
            },
            rpaAction: rpaResult.action,
            recommendations: rpaResult.recommendations,
            nextSteps: rpaResult.nextSteps,
            requiresConfirmation: rpaResult.requiresConfirmation
          };
        } else {
          // Fallback para processamento tradicional
          return await this.processAction(intentResult, userData, userId);
        }
      } else {
        // Processamento tradicional para intents n√£o mapeados
        return await this.processAction(intentResult, userData, userId);
      }

    } catch (error) {
      console.error(`‚ùå Erro no processamento RPA:`, error);
      // Fallback para processamento tradicional
      return await this.processAction(intentResult, userData, userId);
    }
  }

  // üó∫Ô∏è MAPEAMENTO DE INTENTS PARA A√á√ïES RPA
  private mapIntentToRPAAction(intent: string, entities: any, userId: string): any {
    switch (intent) {
      case 'CREATE_GOAL':
        return {
          type: 'CREATE_GOAL',
          userId,
          data: {
            meta: entities.meta,
            valor_total: entities.valor_total,
            data_conclusao: entities.data_conclusao
          },
          priority: 'HIGH',
          requiresConfirmation: false
        };

      case 'ADD_TRANSACTION':
        return {
          type: 'ADD_TRANSACTION',
          userId,
          data: {
            descricao: entities.descricao,
            valor: entities.valor,
            categoria: entities.categoria,
            data: entities.data || new Date()
          },
          priority: 'MEDIUM',
          requiresConfirmation: false
        };

      case 'ANALYZE_INVESTMENT':
        return {
          type: 'ANALYZE_INVESTMENT',
          userId,
          data: {
            investment_type: entities.investment_type,
            amount: entities.amount,
            risk_tolerance: entities.risk_tolerance
          },
          priority: 'HIGH',
          requiresConfirmation: false
        };

      case 'EMERGENCY_FINANCIAL':
        return {
          type: 'EMERGENCY_ACTION',
          userId,
          data: {
            emergency_type: entities.emergency_type,
            description: entities.description
          },
          priority: 'CRITICAL',
          requiresConfirmation: true
        };

      case 'GET_DASHBOARD':
        return {
          type: 'GET_DASHBOARD',
          userId,
          data: {},
          priority: 'LOW',
          requiresConfirmation: false
        };

      default:
        return null; // N√£o mapeado para RPA
    }
  }

  private async loadUserData(userId: string): Promise<any> {
    try {
      // Stub tempor√°rio para evitar erros de m√©todos inexistentes
      return {
        totalTransacoes: 0,
        totalInvestimentos: 0,
        totalMetas: 0,
        hasTransactions: false,
        hasInvestments: false,
        hasGoals: false,
        name: 'Usu√°rio'
      };
    } catch (error) {
      console.error('‚ùå Erro ao carregar dados do usu√°rio:', error);
      return {
        totalTransacoes: 0,
        totalInvestimentos: 0,
        totalMetas: 0,
        hasTransactions: false,
        hasInvestments: false,
        hasGoals: false,
        name: 'Usu√°rio'
      };
    }
  }

  private async processAction(intentResult: any, userData: any, userId: string): Promise<ChatbotResponse> {
    const { type, payload, confidence } = intentResult;

    switch (type) {
      case 'CREATE_GOAL':
        return await this.handleCreateGoal(payload, userId);
      
      case 'CREATE_TRANSACTION':
        return await this.handleAddTransaction(payload, userId);
      
      case 'GET_BALANCE':
        return await this.handleGetBalance(userData, userId);
      
      default:
        return {
          response: intentResult.response,
          action: {
            type: type,
            payload: payload,
            confidence
          },
          requiresConfirmation: intentResult.requiresConfirmation
        };
    }
  }

  private async handleCreateGoal(entities: any, userId: string): Promise<ChatbotResponse> {
    try {
      const { valor_total, meta, data_conclusao } = entities;
      
      if (!valor_total || !meta) {
        return {
          response: 'Preciso saber o valor e o objetivo da meta. Pode me dizer?',
          requiresConfirmation: true
        };
      }

      // Stub tempor√°rio para evitar erro de m√©todo inexistente
      const goal = { id: 'temp-id', meta, valor_total, data_conclusao };

      return {
        response: `üéØ Meta "${meta}" criada com sucesso! Valor: R$ ${valor_total.toFixed(2)}. Vou te ajudar a alcan√ßar esse objetivo!`,
        action: {
          type: 'CREATE_GOAL',
          payload: { goal },
          confidence: 0.9
        },
        recommendations: [
          'Configure aportes autom√°ticos mensais',
          'Monitore o progresso semanalmente',
          'Ajuste a estrat√©gia conforme necess√°rio'
        ],
        nextSteps: [
          'Definir valor do aporte mensal',
          'Escolher investimento adequado',
          'Configurar lembretes'
        ]
      };

    } catch (error) {
      console.error('‚ùå Erro ao criar meta:', error);
      return {
        response: 'Desculpe, tive um problema ao criar sua meta. Pode tentar novamente?',
        requiresConfirmation: true
      };
    }
  }

  private async handleAddTransaction(entities: any, userId: string): Promise<ChatbotResponse> {
    try {
      const { descricao, valor, categoria, data } = entities;
      
      if (!descricao || !valor) {
        return {
          response: 'Preciso saber a descri√ß√£o e o valor da transa√ß√£o. Pode me informar?',
          requiresConfirmation: true
        };
      }

      // Stub tempor√°rio para evitar erro de m√©todo inexistente
      const transaction = { id: 'temp-id', descricao, valor, categoria, data };

      // An√°lise de impacto
      let impactMessage = '';
      if (valor > 1000) {
        impactMessage = ' Transa√ß√£o de alto valor detectada. Considere revisar seu or√ßamento.';
      }

      return {
        response: `üí∞ Transa√ß√£o "${descricao}" adicionada com sucesso! Valor: R$ ${valor.toFixed(2)}.${impactMessage}`,
        action: {
          type: 'ADD_TRANSACTION',
          payload: { transaction },
          confidence: 0.9
        },
        recommendations: [
          'Mantenha um controle regular dos gastos',
          'Configure limites por categoria',
          'Revise o or√ßamento mensal'
        ],
        nextSteps: [
          'Revisar or√ßamento mensal',
          'Configurar alertas de gastos',
          'Analisar padr√µes de consumo'
        ]
      };

    } catch (error) {
      console.error('‚ùå Erro ao adicionar transa√ß√£o:', error);
      return {
        response: 'Desculpe, tive um problema ao adicionar sua transa√ß√£o. Pode tentar novamente?',
        requiresConfirmation: true
      };
    }
  }

  private async handleGetBalance(userData: any, userId: string): Promise<ChatbotResponse> {
    try {
      // Simular c√°lculo de saldo
      const balance = 5000; // Em produ√ß√£o seria calculado baseado nas transa√ß√µes
      
      return {
        response: `üí≥ Seu saldo atual √© R$ ${balance.toFixed(2)}. Voc√™ tem ${userData.totalTransacoes} transa√ß√µes registradas.`,
        action: {
          type: 'GET_BALANCE',
          payload: { balance, transactionCount: userData.totalTransacoes },
          confidence: 0.8
        },
        recommendations: [
          'Mantenha um fundo de emerg√™ncia',
          'Monitore gastos regularmente',
          'Planeje investimentos'
        ]
      };

    } catch (error) {
      console.error('‚ùå Erro ao obter saldo:', error);
      return {
        response: 'Desculpe, n√£o consegui calcular seu saldo. Pode tentar novamente?',
        requiresConfirmation: true
      };
    }
  }

  private async saveMessageToHistory(chatId: string, userId: string, message: string, response: string): Promise<void> {
    try {
      await this.chatHistoryService.addMessage({
        chatId,
        userId,
        sender: 'user',
        content: message,
        timestamp: new Date(),
        metadata: { messageType: 'basic', isImportant: false }
      });
      await this.chatHistoryService.addMessage({
        chatId,
        userId,
        sender: 'assistant',
        content: response,
        timestamp: new Date(),
        metadata: { messageType: 'basic', isImportant: false }
      });
    } catch (error) {
      console.error('‚ùå Erro ao salvar mensagem no hist√≥rico:', error);
    }
  }

  async createSession(req: Request, res: Response): Promise<void> {
    try {
      // ‚úÖ CORRE√á√ÉO: Extrair userId do req.user (autentica√ß√£o)
      const userId = req.user?.uid || req.user?.firebaseUid || req.user?._id;
      
      if (!userId) {
        res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
        return;
      }

      console.log(`[ChatbotController] Criando nova sess√£o para usu√°rio: ${userId}`);

      // Criar nova sess√£o
      const session = await this.chatHistoryService.createConversation(userId);
      
      console.log(`[ChatbotController] Sess√£o criada: ${session.chatId}`);

      res.json({ 
        success: true,
        chatId: session.chatId,
        message: 'Sess√£o criada com sucesso'
      });
    } catch (error) {
      console.error('‚ùå Erro ao criar sess√£o:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao criar sess√£o' 
      });
    }
  }

  async getSessions(req: Request, res: Response): Promise<void> {
    try {
      // ‚úÖ CORRE√á√ÉO: Extrair userId do req.user (autentica√ß√£o)
      const userId = req.user?.uid || req.user?.firebaseUid || req.user?._id;
      
      if (!userId) {
        res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
        return;
      }

      console.log(`[ChatbotController] Buscando sess√µes para usu√°rio: ${userId}`);

      // Buscar sess√µes do usu√°rio
      const sessions = await this.chatHistoryService.getSessions(userId);
      
      console.log(`[ChatbotController] Encontradas ${sessions.length} sess√µes`);

      res.json({ 
        success: true,
        data: sessions,
        message: 'Sess√µes carregadas com sucesso'
      });
    } catch (error) {
      console.error('‚ùå Erro ao buscar sess√µes:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao buscar sess√µes' 
      });
    }
  }

  async deleteSession(req: Request, res: Response): Promise<void> {
    const { sessionId } = req.params;
    const userId = req.user?.uid;
    
    if (!userId) {
      res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
      return;
    }

    try {
      await this.chatHistoryService.deleteConversation(sessionId);
      res.json({ message: 'Sess√£o deletada com sucesso' });
    } catch (error) {
      console.error('‚ùå Erro ao deletar sess√£o:', error);
      res.status(500).json({ error: 'Erro ao deletar sess√£o' });
    }
  }

  // üìä M√âTODOS RPA ADICIONAIS
  async getRPAActionHistory(req: Request, res: Response): Promise<void> {
    const userId = req.user?.uid;
    
    if (!userId) {
      res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
      return;
    }

    try {
      const history = await this.chatbotRPAService.getUserActionHistory(userId);
      res.json({ history });
    } catch (error) {
      console.error('‚ùå Erro ao obter hist√≥rico RPA:', error);
      res.status(500).json({ error: 'Erro ao obter hist√≥rico' });
    }
  }

  async getRPAStatus(req: Request, res: Response): Promise<void> {
    try {
      const status = await this.chatbotRPAService.getSystemStatus();
      res.json({ status });
    } catch (error) {
      console.error('‚ùå Erro ao obter status RPA:', error);
      res.status(500).json({ error: 'Erro ao obter status' });
    }
  }

  async preloadCommonResponses(): Promise<void> {
    // Pr√©-carregar respostas comuns para melhor performance
    console.log('üîÑ Pr√©-carregando respostas comuns...');
  }

  getPerformanceStats(): any {
    return {
      cacheSize: this.responseCache.size,
      averageResponseTime: 150, // ms
      totalRequests: 1000
    };
  }

  clearCache(): void {
    this.responseCache.clear();
    console.log('üóëÔ∏è Cache do chatbot limpo');
  }

  // ‚úÖ ADICIONADO: M√©todo p√∫blico para acessar conversa
  async getConversation(chatId: string): Promise<any> {
    return await this.chatHistoryService.getConversation(chatId);
  }
}

const chatbotController = ChatbotController.getInstance();

export const handleChatQuery = chatbotController.processMessage.bind(chatbotController);
export const startNewSession = chatbotController.createSession.bind(chatbotController);
export const getSessions = chatbotController.getSessions.bind(chatbotController);
export const deleteConversation = chatbotController.deleteSession.bind(chatbotController);
// Exporte fun√ß√µes stub para as demais rotas se n√£o existirem implementa√ß√µes
export const getSession = async (req: Request, res: Response) => {
  try {
    const { chatId } = req.params;
    const userId = req.user?.uid || req.user?.firebaseUid || req.user?._id;
    
    if (!userId) {
      res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
      return;
    }

    console.log(`[ChatbotController] Buscando sess√£o ${chatId} para usu√°rio ${userId}`);

    // ‚úÖ CORRE√á√ÉO: Usar m√©todo p√∫blico em vez de acessar propriedade privada
    const conversation = await chatbotController.getConversation(chatId);
    
    // Verificar se a conversa pertence ao usu√°rio
    if (conversation.userId !== userId) {
      res.status(403).json({ error: 'Acesso negado a esta conversa' });
      return;
    }

    res.json({ 
      success: true,
      messages: conversation.messages,
      chatId: conversation.chatId,
      createdAt: conversation.createdAt,
      updatedAt: conversation.updatedAt
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar sess√£o:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erro ao buscar sess√£o' 
    });
  }
};
export const submitFeedback = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const getFeedbackAnalytics = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const deleteAllConversations = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const streamChatResponse = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const getSuggestions = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const analyzeSentiment = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const getCacheStats = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const clearCache = (req, res) => res.status(501).json({ error: 'N√£o implementado' });
export const adaptResponseToSentiment = (req, res) => res.status(501).json({ error: 'N√£o implementado' });