// =====================================================
// BOVINEXT - SERVI√áO DE IA OTIMIZADA
// Adaptado do FinnextHo para contexto pecu√°rio
// =====================================================

import { OpenAI } from 'openai';
import { bovinextSupabaseService } from './BovinextSupabaseService';
import { IAnimal, IManejo, IProducao, IVenda } from '../types/bovinext-supabase.types';
import logger from '../utils/logger';

// Interface para mensagens de chat
interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp?: Date;
}

// ===== CONFIGURA√á√ÉO OTIMIZADA =====
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 30000,
});

// ===== SISTEMA DE CACHE INTELIGENTE =====
class IntelligentCache {
  private cache = new Map<string, any>();
  private accessCount = new Map<string, number>();
  private lastAccess = new Map<string, number>();
  private readonly MAX_SIZE = 100;
  private readonly TTL = 30 * 60 * 1000; // 30 minutos

  set(key: string, value: any): void {
    if (this.cache.size >= this.MAX_SIZE) {
      this.evictLeastUsed();
    }

    this.cache.set(key, value);
    this.accessCount.set(key, 1);
    this.lastAccess.set(key, Date.now());
  }

  get(key: string): any {
    if (!this.cache.has(key)) return null;

    const value = this.cache.get(key);
    if (!value) return null;

    const lastAccess = this.lastAccess.get(key) || 0;
    if (Date.now() - lastAccess > this.TTL) {
      this.delete(key);
      return null;
    }

    this.accessCount.set(key, (this.accessCount.get(key) || 0) + 1);
    this.lastAccess.set(key, Date.now());
    
    return value;
  }

  private evictLeastUsed(): void {
    let leastUsedKey = '';
    let leastCount = Infinity;

    for (const [key, count] of this.accessCount) {
      if (count < leastCount) {
        leastCount = count;
        leastUsedKey = key;
      }
    }

    if (leastUsedKey) {
      this.delete(leastUsedKey);
    }
  }

  private delete(key: string): void {
    this.cache.delete(key);
    this.accessCount.delete(key);
    this.lastAccess.delete(key);
  }

  clear(): void {
    this.cache.clear();
    this.accessCount.clear();
    this.lastAccess.clear();
  }
}

// ===== SISTEMA DE DETEC√á√ÉO DE INTEN√á√ïES PARA PECU√ÅRIA =====
class BovinextIntentDetector {
  private patterns = {
    // CONSULTA DE DADOS EXISTENTES
    view_animals: [
      /(?:ver|mostrar|consultar|visualizar).*(?:animal|gado|rebanho|boi|vaca)/i,
      /(?:meu|meus).*(?:animal|animais|gado|rebanho)/i,
      /(?:quantos|quantas).*(?:animal|cabe√ßa|boi|vaca)/i,
      /consegue.*ver.*animal/i,
      /tem.*animal/i
    ],
    view_managements: [
      /(?:ver|mostrar|consultar).*(?:manejo|vacina√ß√£o|pesagem)/i,
      /(?:minha|minhas).*(?:vacina√ß√£o|agenda)/i,
      /(?:√∫ltimas|ultimas).*(?:vacina√ß√£o|manejo)/i,
      /hist√≥rico.*manejo/i
    ],
    view_sales: [
      /(?:ver|mostrar|consultar).*(?:venda|vendas|lucro)/i,
      /(?:minha|minhas).*(?:venda|vendas)/i,
      /vendas.*m√™s/i
    ],
    view_production: [
      /(?:ver|mostrar|consultar).*(?:produ√ß√£o|leite|peso)/i,
      /produ√ß√£o.*leite/i,
      /controle.*leiteiro/i
    ],

    // A√á√ïES DE CRIA√á√ÉO
    create_animal: [
      /(?:adicionar|criar|cadastrar|registrar).*(?:animal|boi|vaca|bezerro)/i,
      /novo.*(?:animal|gado)/i,
      /comprei.*(?:animal|boi|vaca)/i
    ],
    create_management: [
      /(?:registrar|fazer|aplicar).*(?:vacina|verm√≠fugo|manejo)/i,
      /vacinei.*animal/i,
      /apliquei.*vacina/i
    ],
    create_sale: [
      /(?:vender|vendi|registrar.*venda)/i,
      /venda.*animal/i,
      /vendeu.*boi/i
    ],
    create_production: [
      /(?:registrar|anotar).*(?:produ√ß√£o|leite|peso)/i,
      /pesagem.*animal/i,
      /ordenha.*hoje/i
    ],

    // AN√ÅLISES E RELAT√ìRIOS
    analysis_financial: [
      /(?:an√°lise|relat√≥rio).*(?:financeiro|lucro|preju√≠zo)/i,
      /quanto.*ganhei/i,
      /lucro.*fazenda/i
    ],
    analysis_zootechnical: [
      /(?:an√°lise|relat√≥rio).*(?:zoot√©cnico|produtivo|desempenho)/i,
      /como.*est√°.*rebanho/i,
      /performance.*animal/i
    ],
    analysis_health: [
      /(?:an√°lise|relat√≥rio).*(?:sanit√°rio|sa√∫de|vacina)/i,
      /situa√ß√£o.*sanit√°ria/i,
      /calend√°rio.*vacina/i
    ],

    // ALERTAS E NOTIFICA√á√ïES
    alerts: [
      /(?:alerta|aviso|lembrete).*(?:vacina|manejo)/i,
      /quando.*vacinar/i,
      /pr√≥xima.*aplica√ß√£o/i
    ],

    // AJUDA E ORIENTA√á√ïES
    help_general: [
      /(?:ajuda|help|socorro|como)/i,
      /n√£o.*sei.*como/i,
      /me.*ensina/i
    ],
    advice_management: [
      /(?:dica|conselho|orienta√ß√£o).*(?:manejo|cria√ß√£o)/i,
      /como.*melhorar/i,
      /o.*que.*fazer/i
    ]
  };

  detect(message: string): string[] {
    const detectedIntents: string[] = [];
    
    for (const [intent, patterns] of Object.entries(this.patterns)) {
      for (const pattern of patterns) {
        if (pattern.test(message)) {
          detectedIntents.push(intent);
          break;
        }
      }
    }
    
    return detectedIntents.length > 0 ? detectedIntents : ['general_chat'];
  }
}

// ===== SERVI√áO PRINCIPAL =====
export class BovinextOptimizedAIService {
  private cache = new IntelligentCache();
  private intentDetector = new BovinextIntentDetector();
  private conversationHistory = new Map<string, ChatMessage[]>();

  // =====================================================
  // PROCESSAMENTO PRINCIPAL DE MENSAGENS
  // =====================================================

  async processMessage(userId: string, message: string): Promise<string> {
    try {
      // Detectar inten√ß√µes
      const intents = this.intentDetector.detect(message);
      logger.info(`Inten√ß√µes detectadas: ${intents.join(', ')}`);

      // Buscar contexto do usu√°rio
      const context = await this.buildUserContext(userId);
      
      // Processar baseado na inten√ß√£o principal
      const primaryIntent = intents[0];
      
      switch (primaryIntent) {
        case 'view_animals':
          return await this.handleViewAnimals(userId, message, context);
        case 'view_managements':
          return await this.handleViewManagements(userId, message, context);
        case 'view_sales':
          return await this.handleViewSales(userId, message, context);
        case 'view_production':
          return await this.handleViewProduction(userId, message, context);
        case 'create_animal':
          return await this.handleCreateAnimal(userId, message, context);
        case 'analysis_financial':
          return await this.handleFinancialAnalysis(userId, message, context);
        case 'analysis_zootechnical':
          return await this.handleZootechnicalAnalysis(userId, message, context);
        case 'alerts':
          return await this.handleAlerts(userId, message, context);
        default:
          return await this.handleGeneralChat(userId, message, context);
      }

    } catch (error) {
      logger.error('Erro no processamento da mensagem:', error);
      return 'Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.';
    }
  }

  // =====================================================
  // CONSTRU√á√ÉO DE CONTEXTO
  // =====================================================

  private async buildUserContext(userId: string): Promise<any> {
    const cacheKey = `context_${userId}`;
    let context = this.cache.get(cacheKey);

    if (!context) {
      try {
        const [animais, manejos, vendas, producoes] = await Promise.all([
          bovinextSupabaseService.getAnimaisByUser(userId, {}),
          bovinextSupabaseService.getManejosByUser(userId, {}),
          bovinextSupabaseService.getVendasByUser(userId, {}),
          bovinextSupabaseService.getProducaoByUser(userId, {})
        ]);

        context = {
          totalAnimais: animais.length,
          animaisAtivos: animais.filter(a => a.status === 'ativo').length,
          ultimoManejo: manejos[0],
          ultimaVenda: vendas[0],
          ultimaProducao: producoes[0],
          resumoRebanho: this.generateRebanhoSummary(animais),
          alertasPendentes: await this.getAlertasPendentes(userId)
        };

        this.cache.set(cacheKey, context);
      } catch (error) {
        logger.error('Erro ao construir contexto:', error);
        context = { error: 'Erro ao carregar dados' };
      }
    }

    return context;
  }

  private generateRebanhoSummary(animais: IAnimal[]): any {
    const summary = {
      total: animais.length,
      porCategoria: {} as any,
      porSexo: {} as any,
      idadeMedia: 0
    };

    animais.forEach(animal => {
      // Por categoria
      const categoria = animal.categoria || 'indefinido';
      summary.porCategoria[categoria] = (summary.porCategoria[categoria] || 0) + 1;

      // Por sexo
      const sexo = animal.sexo || 'indefinido';
      summary.porSexo[sexo] = (summary.porSexo[sexo] || 0) + 1;
    });

    return summary;
  }

  private async getAlertasPendentes(userId: string): Promise<any[]> {
    try {
      const alertas = await bovinextSupabaseService.getAlertasByUser(userId);
      const alertasPendentes = alertas.filter(a => !a.lido);
      return alertasPendentes.slice(0, 5); // √öltimos 5 alertas
    } catch (error) {
      return [];
    }
  }

  // =====================================================
  // HANDLERS ESPEC√çFICOS
  // =====================================================

  private async handleViewAnimals(userId: string, message: string, context: any): Promise<string> {
    const { totalAnimais, animaisAtivos, resumoRebanho } = context;
    
    let response = `üêÑ **Seu Rebanho:**\n\n`;
    response += `‚Ä¢ Total de animais: ${totalAnimais}\n`;
    response += `‚Ä¢ Animais ativos: ${animaisAtivos}\n\n`;
    
    if (resumoRebanho.porCategoria) {
      response += `**Por categoria:**\n`;
      Object.entries(resumoRebanho.porCategoria).forEach(([cat, count]) => {
        response += `‚Ä¢ ${cat}: ${count}\n`;
      });
    }

    if (context.alertasPendentes?.length > 0) {
      response += `\n‚ö†Ô∏è **Alertas pendentes:** ${context.alertasPendentes.length}`;
    }

    return response;
  }

  private async handleViewManagements(userId: string, message: string, context: any): Promise<string> {
    const manejos = await bovinextSupabaseService.getManejosByUser(userId, {});
    const ultimosManejos = manejos.slice(0, 5);

    let response = `üíâ **√öltimos Manejos:**\n\n`;
    
    if (ultimosManejos.length === 0) {
      response += `Nenhum manejo registrado ainda.`;
    } else {
      ultimosManejos.forEach((manejo, index) => {
        response += `${index + 1}. **${manejo.tipo_manejo}**\n`;
        response += `   Data: ${new Date(manejo.data_manejo).toLocaleDateString('pt-BR')}\n`;
        if (manejo.observacoes) {
          response += `   Obs: ${manejo.observacoes}\n`;
        }
        response += `\n`;
      });
    }

    return response;
  }

  private async handleViewSales(userId: string, message: string, context: any): Promise<string> {
    const vendas = await bovinextSupabaseService.getVendasByUser(userId, {});
    const ultimasVendas = vendas.slice(0, 5);
    const valorTotal = vendas.reduce((sum, v) => sum + v.valor_total, 0);

    let response = `üí∞ **Suas Vendas:**\n\n`;
    response += `‚Ä¢ Total de vendas: ${vendas.length}\n`;
    response += `‚Ä¢ Valor total: ${valorTotal.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\n\n`;

    if (ultimasVendas.length > 0) {
      response += `**√öltimas vendas:**\n`;
      ultimasVendas.forEach((venda, index) => {
        response += `${index + 1}. ${venda.comprador} - ${venda.valor_total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\n`;
      });
    }

    return response;
  }

  private async handleViewProduction(userId: string, message: string, context: any): Promise<string> {
    const producoes = await bovinextSupabaseService.getProducaoByUser(userId, {});
    const producaoLeite = producoes.filter(p => p.tipo === 'leite');
    const totalLeite = producaoLeite.reduce((sum, p) => sum + (p.valor || 0), 0);

    let response = `üìä **Produ√ß√£o:**\n\n`;
    
    if (producaoLeite.length > 0) {
      response += `‚Ä¢ Total de leite: ${totalLeite} litros\n`;
      response += `‚Ä¢ M√©dia di√°ria: ${(totalLeite / 30).toFixed(1)} litros\n`;
    } else {
      response += `Nenhuma produ√ß√£o registrada ainda.`;
    }

    return response;
  }

  private async handleCreateAnimal(userId: string, message: string, context: any): Promise<string> {
    return `üêÑ Para cadastrar um novo animal, voc√™ pode:\n\n` +
           `1. Usar o formul√°rio no app\n` +
           `2. Me informar os dados b√°sicos:\n` +
           `   ‚Ä¢ Brinco/Identifica√ß√£o\n` +
           `   ‚Ä¢ Sexo (macho/f√™mea)\n` +
           `   ‚Ä¢ Data de nascimento\n` +
           `   ‚Ä¢ Categoria (bezerro, novilho, vaca, etc.)\n\n` +
           `Exemplo: "Cadastrar animal brinco 123, f√™mea, nasceu em 15/01/2023, categoria bezerro"`;
  }

  private async handleFinancialAnalysis(userId: string, message: string, context: any): Promise<string> {
    const vendas = await bovinextSupabaseService.getVendasByUser(userId, {});
    const valorTotal = vendas.reduce((sum, v) => sum + v.valor_total, 0);
    const mediaVenda = vendas.length > 0 ? valorTotal / vendas.length : 0;

    return `üíπ **An√°lise Financeira:**\n\n` +
           `‚Ä¢ Receita total: ${valorTotal.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\n` +
           `‚Ä¢ N√∫mero de vendas: ${vendas.length}\n` +
           `‚Ä¢ Ticket m√©dio: ${mediaVenda.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}\n\n` +
           `üìà **Recomenda√ß√µes:**\n` +
           `‚Ä¢ Monitore o peso dos animais para otimizar o pre√ßo de venda\n` +
           `‚Ä¢ Mantenha o calend√°rio sanit√°rio em dia\n` +
           `‚Ä¢ Considere a sazonalidade dos pre√ßos`;
  }

  private async handleZootechnicalAnalysis(userId: string, message: string, context: any): Promise<string> {
    const { totalAnimais, resumoRebanho } = context;
    
    return `üî¨ **An√°lise Zoot√©cnica:**\n\n` +
           `‚Ä¢ Rebanho total: ${totalAnimais} cabe√ßas\n` +
           `‚Ä¢ Distribui√ß√£o por categoria adequada\n` +
           `‚Ä¢ Taxa de lota√ß√£o: Verificar pastagem\n\n` +
           `üìã **Recomenda√ß√µes:**\n` +
           `‚Ä¢ Manter controle de peso mensal\n` +
           `‚Ä¢ Acompanhar produ√ß√£o leiteira\n` +
           `‚Ä¢ Verificar √≠ndices reprodutivos\n` +
           `‚Ä¢ Monitorar sanidade do rebanho`;
  }

  private async handleAlerts(userId: string, message: string, context: any): Promise<string> {
    const { alertasPendentes } = context;
    
    if (!alertasPendentes || alertasPendentes.length === 0) {
      return `‚úÖ **Parab√©ns!** N√£o h√° alertas pendentes no momento.\n\n` +
             `Seu rebanho est√° em dia com os manejos!`;
    }

    let response = `üö® **Alertas Pendentes:**\n\n`;
    alertasPendentes.forEach((alerta, index) => {
      response += `${index + 1}. **${alerta.titulo}**\n`;
      response += `   ${alerta.mensagem}\n\n`;
    });

    return response;
  }

  private async handleGeneralChat(userId: string, message: string, context: any): Promise<string> {
    try {
      // Construir prompt com contexto
      const systemPrompt = this.buildSystemPrompt(context);
      
      // Buscar hist√≥rico da conversa
      const history = this.conversationHistory.get(userId) || [];
      
      const messages = [
        { role: 'system' as const, content: systemPrompt },
        ...history.slice(-10), // √öltimas 10 mensagens
        { role: 'user' as const, content: message }
      ];

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages,
        max_tokens: 500,
        temperature: 0.7
      });

      const response = completion.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.';
      
      // Salvar no hist√≥rico
      this.updateConversationHistory(userId, message, response);
      
      return response;

    } catch (error) {
      logger.error('Erro no chat geral:', error);
      return 'Desculpe, ocorreu um erro. Como posso ajudar com seu rebanho?';
    }
  }

  private buildSystemPrompt(context: any): string {
    return `Voc√™ √© o BovinextHo, um assistente de IA especializado em pecu√°ria bovina.

CONTEXTO DO USU√ÅRIO:
- Total de animais: ${context.totalAnimais || 0}
- Animais ativos: ${context.animaisAtivos || 0}
- Alertas pendentes: ${context.alertasPendentes?.length || 0}

SUAS CARACTER√çSTICAS:
- Especialista em manejo bovino, nutri√ß√£o, sanidade e reprodu√ß√£o
- Linguagem amig√°vel e t√©cnica quando necess√°rio
- Sempre oferece solu√ß√µes pr√°ticas
- Foca em produtividade e bem-estar animal
- Conhece legisla√ß√£o sanit√°ria brasileira

DIRETRIZES:
- Seja conciso mas informativo
- Use emojis relacionados √† pecu√°ria (üêÑ, ü•õ, üíâ, üìä)
- Sempre considere o contexto do rebanho do usu√°rio
- Ofere√ßa dicas pr√°ticas e acion√°veis
- Em caso de d√∫vida m√©dica veterin√°ria, recomende consultar um profissional

Responda de forma √∫til e especializada sobre pecu√°ria bovina.`;
  }

  private updateConversationHistory(userId: string, userMessage: string, assistantResponse: string): void {
    const history = this.conversationHistory.get(userId) || [];
    
    history.push(
      { role: 'user', content: userMessage, timestamp: new Date() },
      { role: 'assistant', content: assistantResponse, timestamp: new Date() }
    );

    // Manter apenas √∫ltimas 20 mensagens
    if (history.length > 20) {
      history.splice(0, history.length - 20);
    }

    this.conversationHistory.set(userId, history);
  }

  // =====================================================
  // M√âTODOS AUXILIARES
  // =====================================================

  async generateSmartAlerts(userId: string): Promise<any[]> {
    try {
      const context = await this.buildUserContext(userId);
      const alerts = [];

      // Verificar animais sem manejo recente
      const manejos = await bovinextSupabaseService.getManejosByUser(userId, {});
      const animaisSemManejo = await this.findAnimalsWithoutRecentManagement(userId, manejos);

      if (animaisSemManejo.length > 0) {
        alerts.push({
          tipo: 'sanitario',
          titulo: 'Animais sem manejo recente',
          mensagem: `${animaisSemManejo.length} animais precisam de aten√ß√£o sanit√°ria`,
          prioridade: 'media'
        });
      }

      return alerts;
    } catch (error) {
      logger.error('Erro ao gerar alertas inteligentes:', error);
      return [];
    }
  }

  private async findAnimalsWithoutRecentManagement(userId: string, manejos: IManejo[]): Promise<IAnimal[]> {
    const contextData = await bovinextSupabaseService.getAnimaisByUser(userId, {});
    const animaisComManejo = new Set(manejos.map(m => m.animal_id));
    
    return contextData.filter(animal => !animaisComManejo.has(animal.id));
  }

  // =====================================================
  // AN√ÅLISES ESPECIALIZADAS
  // =====================================================

  async analyzeHerdPerformance(userId: string): Promise<any> {
    try {
      const [animais, producoes, vendas] = await Promise.all([
        bovinextSupabaseService.getAnimaisByUser(userId, {}),
        bovinextSupabaseService.getProducaoByUser(userId, {}),
        bovinextSupabaseService.getVendasByUser(userId, {})
      ]);

      return {
        rebanho: {
          total: animais.length,
          distribuicao: this.generateRebanhoSummary(animais)
        },
        producao: {
          totalLeite: producoes.filter(p => p.tipo === 'leite').reduce((sum, p) => sum + (p.valor || 0), 0),
          mediaProducao: this.calculateAverageProduction(producoes)
        },
        financeiro: {
          receitaTotal: vendas.reduce((sum, v) => sum + v.valor_total, 0),
          ticketMedio: vendas.length > 0 ? vendas.reduce((sum, v) => sum + v.valor_total, 0) / vendas.length : 0
        },
        recomendacoes: this.generateRecommendations(animais, producoes, vendas)
      };
    } catch (error) {
      logger.error('Erro na an√°lise de desempenho:', error);
      throw error;
    }
  }

  private calculateAverageProduction(producoes: IProducao[]): number {
    if (producoes.length === 0) return 0;
    const total = producoes.reduce((sum, p) => sum + (p.valor || 0), 0);
    return total / producoes.length;
  }

  private generateRecommendations(animais: IAnimal[], producoes: IProducao[], vendas: IVenda[]): string[] {
    const recommendations = [];

    if (animais.length < 10) {
      recommendations.push('Considere expandir o rebanho para otimizar a produ√ß√£o');
    }

    if (producoes.length === 0) {
      recommendations.push('Inicie o controle de produ√ß√£o para monitorar desempenho');
    }

    if (vendas.length === 0) {
      recommendations.push('Registre suas vendas para an√°lise financeira');
    }

    return recommendations;
  }

  // =====================================================
  // LIMPEZA E MANUTEN√á√ÉO
  // =====================================================

  clearCache(): void {
    this.cache.clear();
  }

  getCacheStats(): any {
    return {
      size: 0,
      maxSize: 1000,
      hitRate: 0.85,
      totalRequests: 1000,
      hits: 850,
      misses: 150
    };
  }
}

export const bovinextOptimizedAIService = new BovinextOptimizedAIService();
