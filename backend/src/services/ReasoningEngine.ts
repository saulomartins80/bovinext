import { EnterpriseAIEngine } from './EnterpriseAIEngine';

interface UserMessage {
  content: string;
  userId: string;
  chatId: string;
  timestamp: Date;
  metadata?: any;
}

interface ConversationContext {
  recentMessages: any[];
  userProfile: any;
  financialContext: any;
  inferredGoals: any;
}

interface MessageAnalysis {
  intent: DetectedIntent;
  entities: any;
  confidence: number;
  reasoning: string;
  response: string;
  action?: any;
  requiresConfirmation: boolean;
}

export interface DetectedIntent {
  type: string;
  payload: any;
  confidence: number;
  reasoning: string;
  response?: string; // Added for data collection
  requiresConfirmation: boolean; // Added for data collection
  missingFields?: string[]; // Added for data collection
  collectedData?: any; // Added for data collection
  entities?: any; // Added for entities
}

export class ReasoningEngine {
  private aiService: EnterpriseAIEngine;

  constructor() {
    this.aiService = new EnterpriseAIEngine();
  }

  async analyze(message: UserMessage, context: ConversationContext): Promise<MessageAnalysis> {
    try {
      console.log('[ReasoningEngine] üß† Analisando mensagem:', message.content);

      // 1. An√°lise de inten√ß√£o avan√ßada
      let intent = await this.detectIntent(message, context);
      
      // 2. Extra√ß√£o de entidades financeiras
      const entities = this.extractFinancialEntities(message.content, intent);
      
      // 3. Verifica√ß√£o de consist√™ncia
      const consistencyCheck = this.checkConsistency(intent, entities, context);
      
      // 4. Planejamento de resposta
      const response = await this.planResponse(intent, entities, consistencyCheck, context);
      
      // 5. Determinar se precisa de confirma√ß√£o
      const requiresConfirmation = this.determineConfirmationNeed(intent, entities, context);

      return {
        intent,
        entities,
        confidence: intent.confidence,
        reasoning: intent.reasoning,
        response: response.text, // ‚úÖ CORRE√á√ÉO: Usar response.text
        requiresConfirmation
      };

    } catch (error) {
      console.error('[ReasoningEngine] ‚ùå Erro na an√°lise:', error);
      return {
        intent: {
          type: 'UNKNOWN',
          payload: {},
          confidence: 0,
          reasoning: 'Erro na an√°lise',
          requiresConfirmation: false
        },
        entities: {},
        confidence: 0,
        reasoning: 'Erro no processamento',
        response: 'Desculpe, tive um problema t√©cnico. Pode tentar novamente?',
        requiresConfirmation: false
      };
    }
  }

  private async detectIntent(message: UserMessage, context: ConversationContext): Promise<DetectedIntent> {
    // ‚úÖ CORRE√á√ÉO: Usar detec√ß√£o por palavras-chave primeiro (mais r√°pido e preciso)
    const quickIntent = this.fallbackIntentDetection(message.content);
    
    // Se detectou uma inten√ß√£o espec√≠fica com alta confian√ßa, usar ela
    if (quickIntent.confidence > 0.7 && quickIntent.type !== 'UNKNOWN') {
      console.log(`[ReasoningEngine] ‚úÖ Intent detectado rapidamente: ${quickIntent.type} (confian√ßa: ${quickIntent.confidence})`);
      return quickIntent;
    }
    
    // ‚úÖ CORRE√á√ÉO: Melhorar detec√ß√£o de intents espec√≠ficos
    const specificIntent = this.detectSpecificIntents(message.content);
    if (specificIntent && specificIntent.confidence > 0.8) {
      console.log(`[ReasoningEngine] ‚úÖ Intent espec√≠fico detectado: ${specificIntent.type} (confian√ßa: ${specificIntent.confidence})`);
      return specificIntent;
    }
    
    // Se n√£o detectou nada espec√≠fico, tentar an√°lise com IA
    const enhancedPrompt = this.buildEnhancedPrompt(message, context);
    
    try {
      // ‚úÖ CORRE√á√ÉO: Usar o m√©todo correto do AIService
      const result = await this.aiService.processEnterpriseRequest('reasoning_analysis', message.content, { type: 'reasoning', context });
      const aiResponse = { text: result.response };
      
      const response = aiResponse?.text || 'N√£o consegui processar sua mensagem. Pode tentar novamente?';
      
      // Parsear a resposta como JSON se poss√≠vel
      let parsedResponse;
      try {
        const responseText = typeof response === 'string' ? response : String(response);
        parsedResponse = JSON.parse(responseText);
      } catch {
        // Se n√£o for JSON v√°lido, usar a detec√ß√£o por palavras-chave
        console.log(`[ReasoningEngine] ‚ö†Ô∏è Resposta da IA n√£o √© JSON v√°lido, usando fallback`);
        return quickIntent;
      }
      
      const intent = {
        type: parsedResponse.action?.type || quickIntent.type,
        payload: parsedResponse.action?.payload || {},
        confidence: this.calculateConfidence(parsedResponse),
        reasoning: parsedResponse.reasoning || quickIntent.reasoning,
        requiresConfirmation: false // Default to false for AI-generated intents
      };
      
      console.log(`[ReasoningEngine] ‚úÖ Intent detectado via IA: ${intent.type} (confian√ßa: ${intent.confidence})`);
      return intent;

    } catch (error) {
      console.error('[ReasoningEngine] ‚ùå Erro na detec√ß√£o de inten√ß√£o:', error);
      
      // Fallback para detec√ß√£o simples
      console.log(`[ReasoningEngine] üîÑ Usando fallback para: ${message.content}`);
      return quickIntent;
    }
  }

  // ‚úÖ NOVO: Detec√ß√£o de intents espec√≠ficos mais robusta
  private detectSpecificIntents(message: string): DetectedIntent | null {
    const lowerMessage = message.toLowerCase();
    
    // Detectar cria√ß√£o de investimento
    if (lowerMessage.includes('criar') && (lowerMessage.includes('investimento') || lowerMessage.includes('investir') || lowerMessage.includes('ivestimento'))) {
      return {
        type: 'CREATE_INVESTMENT',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido de cria√ß√£o de investimento',
        entities: {},
        requiresConfirmation: false
      };
    }
    
    // Detectar cria√ß√£o de transa√ß√£o
    if (lowerMessage.includes('criar') && (lowerMessage.includes('transa√ß√£o') || lowerMessage.includes('transacao') || lowerMessage.includes('gasto') || lowerMessage.includes('receita'))) {
      return {
        type: 'CREATE_TRANSACTION',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido de cria√ß√£o de transa√ß√£o',
        entities: {},
        requiresConfirmation: false
      };
    }
    
    // Detectar cria√ß√£o de meta
    if (lowerMessage.includes('criar') && (lowerMessage.includes('meta') || lowerMessage.includes('objetivo') || lowerMessage.includes('sonho'))) {
      return {
        type: 'CREATE_GOAL',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido de cria√ß√£o de meta',
        entities: {},
        requiresConfirmation: false
      };
    }
    
    // Detectar frustra√ß√£o
    if (lowerMessage.includes('cards') || lowerMessage.includes('repetindo') || lowerMessage.includes('mesma coisa') || lowerMessage.includes('n√£o sabe dialogar')) {
      return {
        type: 'FRUSTRATION',
        payload: {},
        confidence: 0.95,
        reasoning: 'Detectada frustra√ß√£o do usu√°rio',
        entities: {},
        requiresConfirmation: false
      };
    }
    
    // Detectar pedido de ajuda
    if (lowerMessage.includes('ajude') || lowerMessage.includes('ajuda') || lowerMessage.includes('ajudar')) {
      return {
        type: 'GENERAL_HELP',
        payload: {},
        confidence: 0.8,
        reasoning: 'Detectado pedido de ajuda',
        entities: {},
        requiresConfirmation: false
      };
    }
    
    return null;
  }

  // ‚úÖ NOVO: Detec√ß√£o r√°pida de inten√ß√µes
  private quickIntentDetection(content: string): DetectedIntent | null {
    const lowerContent = content.toLowerCase();
    
    // Detectar cria√ß√£o de transa√ß√£o
    if (lowerContent.includes('criar transa√ß√£o') || lowerContent.includes('nova transa√ß√£o') || 
        lowerContent.includes('registrar transa√ß√£o') || lowerContent.includes('add transa√ß√£o') ||
        lowerContent.includes('quero criar uma nova transa√ß√£o') || lowerContent.includes('criar transa√ßao')) {
      return {
        type: 'CREATE_TRANSACTION',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido expl√≠cito para criar transa√ß√£o',
        requiresConfirmation: false
      };
    }
    
    // Detectar cria√ß√£o de meta
    if (lowerContent.includes('criar meta') || lowerContent.includes('nova meta') || 
        lowerContent.includes('quero criar uma meta') || lowerContent.includes('juntar dinheiro') ||
        lowerContent.includes('economizar para')) {
      return {
        type: 'CREATE_GOAL',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido expl√≠cito para criar meta',
        requiresConfirmation: false
      };
    }
    
    // Detectar cria√ß√£o de investimento
    if (lowerContent.includes('criar investimento') || lowerContent.includes('novo investimento') || 
        lowerContent.includes('quero investir') || lowerContent.includes('aplicar dinheiro')) {
      return {
        type: 'CREATE_INVESTMENT',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido expl√≠cito para criar investimento',
        requiresConfirmation: false
      };
    }
    
    // Detectar sauda√ß√µes
    if (lowerContent.includes('oi') || lowerContent.includes('ol√°') || lowerContent.includes('ola') ||
        lowerContent.includes('bom dia') || lowerContent.includes('boa tarde') || lowerContent.includes('boa noite')) {
      return {
        type: 'GREETING',
        payload: {},
        confidence: 0.95,
        reasoning: 'Detectada sauda√ß√£o',
        requiresConfirmation: false
      };
    }
    
    // Detectar pedidos de ajuda
    if (lowerContent.includes('ajuda') || lowerContent.includes('como funciona') || 
        lowerContent.includes('o que voc√™ pode fazer') || lowerContent.includes('me ajude')) {
      return {
        type: 'GENERAL_HELP',
        payload: {},
        confidence: 0.8,
        reasoning: 'Detectado pedido de ajuda',
        requiresConfirmation: false
      };
    }
    
    return null;
  }

  // ‚úÖ NOVO: An√°lise de contexto da conversa
  private analyzeConversationContext(content: string, context: ConversationContext): DetectedIntent | null {
    const lowerContent = content.toLowerCase();
    const recentMessages = context.recentMessages;
    
    // Se h√° mensagens recentes, analisar contexto
    if (recentMessages.length > 0) {
      const lastMessage = recentMessages[recentMessages.length - 1];
      const lastContent = lastMessage.content.toLowerCase();
      
      // Se a √∫ltima mensagem mencionou transa√ß√£o e esta mensagem confirma
      if (lastContent.includes('transa√ß√£o') && (lowerContent.includes('sim') || lowerContent.includes('ok') || lowerContent.includes('vamos'))) {
        return {
          type: 'CREATE_TRANSACTION',
          payload: {},
          confidence: 0.8,
          reasoning: 'Confirma√ß√£o de cria√ß√£o de transa√ß√£o baseada no contexto',
          requiresConfirmation: false
        };
      }
      
      // Se a √∫ltima mensagem mencionou meta e esta mensagem confirma
      if (lastContent.includes('meta') && (lowerContent.includes('sim') || lowerContent.includes('ok') || lowerContent.includes('vamos'))) {
        return {
          type: 'CREATE_GOAL',
          payload: {},
          confidence: 0.8,
          reasoning: 'Confirma√ß√£o de cria√ß√£o de meta baseada no contexto',
          requiresConfirmation: false
        };
      }
      
      // Se o usu√°rio est√° corrigindo algo
      if (lowerContent.includes('n√£o') || lowerContent.includes('corrigir') || lowerContent.includes('mudar')) {
        return {
          type: 'CORRECTION',
          payload: {},
          confidence: 0.7,
          reasoning: 'Detectada corre√ß√£o baseada no contexto',
          requiresConfirmation: false
        };
      }
    }
    
    return null;
  }

  private buildEnhancedPrompt(message: UserMessage, context: ConversationContext): string {
    const userProfile = context.userProfile;
    const financialContext = context.financialContext;
    const recentMessages = context.recentMessages;

    return `Voc√™ √© o Finn, um assistente financeiro inteligente com personalidade cativante. Suas caracter√≠sticas:

1. **Expertise**: CFA, CFP, MBA em Finan√ßas
2. **Estilo**: Explica√ß√µes claras com exemplos pr√°ticos
3. **Tom**: Amig√°vel mas profissional, como um consultor de confian√ßa
4. **Habilidades**:
   - An√°lise financeira avan√ßada
   - Explica√ß√µes did√°ticas de conceitos complexos
   - Detec√ß√£o de padr√µes financeiros
   - Sugest√µes personalizadas

CONTEXTO DO USU√ÅRIO:
- Nome: ${userProfile.name || 'Usu√°rio'}
- Plano: ${userProfile.subscriptionPlan || 'basic'}
- Perfil de Risco: ${userProfile.riskProfile || 'moderate'}
- Estilo de Comunica√ß√£o: ${userProfile.communicationStyle || 'concise'}

SITUA√á√ÉO FINANCEIRA:
- Total Investido: R$ ${financialContext.totalInvested?.toFixed(2) || '0.00'}
- Taxa de Poupan√ßa: ${financialContext.savingsRate?.toFixed(1) || '0'}%
- Taxa de Investimento: ${financialContext.investmentRate?.toFixed(1) || '0'}%
- Metas Ativas: ${financialContext.goals?.length || 0}
- Investimentos Ativos: ${financialContext.investments?.length || 0}

HIST√ìRICO RECENTE:
${recentMessages.slice(-3).map(msg => `${msg.sender}: ${msg.content}`).join('\n')}

Regras:
- SEMPRE seja preciso com dados financeiros
- Adapte o n√≠vel t√©cnico ao usu√°rio
- Ofere√ßa insights al√©m do √≥bvio
- Mantenha contexto de conversas longas
- Seja natural e conversacional

Formato de resposta:
{
  "response": "resposta natural e conversacional",
  "action": {
    "type": "CREATE_TRANSACTION|CREATE_INVESTMENT|CREATE_GOAL|ANALYZE_DATA|GENERATE_REPORT|UNKNOWN",
    "payload": {dados extra√≠dos}
  },
  "reasoning": "explica√ß√£o do racioc√≠nio usado",
  "insights": ["insight 1", "insight 2"],
  "followUp": ["pergunta 1", "pergunta 2"]
}

Analise a mensagem: "${message.content}"

RESPONDA APENAS COM JSON v√°lido.`;
  }

  private calculateConfidence(response: any): number {
    // Calcular confian√ßa baseada em m√∫ltiplos fatores
    let confidence = 0.5; // Base

    // Confian√ßa baseada na presen√ßa de dados
    if (response.action?.payload && Object.keys(response.action.payload).length > 0) {
      confidence += 0.2;
    }

    // Confian√ßa baseada na qualidade da resposta
    if (response.response && response.response.length > 20) {
      confidence += 0.1;
    }

    // Confian√ßa baseada na presen√ßa de insights
    if (response.insights && response.insights.length > 0) {
      confidence += 0.1;
    }

    // Confian√ßa baseada na coer√™ncia da a√ß√£o
    if (response.action?.type && response.action.type !== 'UNKNOWN') {
      confidence += 0.1;
    }

    return Math.min(confidence, 1.0);
  }

  // ‚úÖ CORRE√á√ÉO: Sistema de coleta autom√°tica de dados
  private async collectMissingData(intent: DetectedIntent, context: ConversationContext): Promise<DetectedIntent> {
    const { entities } = intent;
    
    // Se j√° tem dados suficientes, retornar como est√°
    if (this.hasCompleteData(intent)) {
      return intent;
    }

    // Identificar campos faltantes baseado na inten√ß√£o
    const missingFields = this.getMissingFields(intent);
    
    if (missingFields.length > 0) {
      // Modificar a resposta para coletar dados faltantes
      intent.response = this.generateDataCollectionResponse(intent.type, missingFields, entities);
      intent.requiresConfirmation = true;
      intent.missingFields = missingFields;
      intent.collectedData = entities;
    }

    return intent;
  }

  // ‚úÖ NOVO: Verificar se tem dados completos
  private hasCompleteData(intent: DetectedIntent): boolean {
    const { entities } = intent;
    
    switch (intent.type) {
      case 'CREATE_TRANSACTION':
        return !!(entities.valor && entities.descricao);
      case 'CREATE_GOAL':
        return !!(entities.valor_total && entities.meta);
      case 'CREATE_INVESTMENT':
        return !!(entities.valor && entities.nome);
      default:
        return true;
    }
  }

  // ‚úÖ NOVO: Identificar campos faltantes
  private getMissingFields(intent: DetectedIntent): string[] {
    const { entities } = intent;
    const missing: string[] = [];
    
    switch (intent.type) {
      case 'CREATE_TRANSACTION':
        if (!entities.valor) missing.push('valor');
        if (!entities.descricao) missing.push('descricao');
        if (!entities.tipo) missing.push('tipo');
        break;
      case 'CREATE_GOAL':
        if (!entities.valor_total) missing.push('valor_total');
        if (!entities.meta) missing.push('meta');
        if (!entities.data_conclusao) missing.push('data_conclusao');
        break;
      case 'CREATE_INVESTMENT':
        if (!entities.valor) missing.push('valor');
        if (!entities.nome) missing.push('nome');
        if (!entities.tipo) missing.push('tipo');
        break;
    }
    
    return missing;
  }

  // ‚úÖ NOVO: Gerar resposta para coleta de dados
  private generateDataCollectionResponse(intentType: string, missingFields: string[], entities: any): string {
    const fieldNames = {
      valor: 'valor',
      descricao: 'descri√ß√£o',
      tipo: 'tipo (receita/despesa)',
      valor_total: 'valor total',
      meta: 'objetivo da meta',
      data_conclusao: 'prazo',
      nome: 'nome do investimento'
    };

    const missingFieldNames = missingFields.map(field => fieldNames[field] || field).join(', ');
    
    switch (intentType) {
      case 'CREATE_TRANSACTION':
        return `Perfeito! Vou te ajudar a registrar essa transa√ß√£o! üí∞\n\nPara completar o registro, preciso de mais algumas informa√ß√µes:\n‚Ä¢ ${missingFieldNames}\n\nPode me passar esses detalhes?`;
      
      case 'CREATE_GOAL':
        return `√ìtimo! Vamos criar essa meta financeira! üéØ\n\nPara configurar sua meta, preciso saber:\n‚Ä¢ ${missingFieldNames}\n\nMe conta um pouco mais sobre sua meta!`;
      
      case 'CREATE_INVESTMENT':
        return `Excelente! Vamos registrar esse investimento! üìà\n\nPara cadastrar corretamente, preciso de:\n‚Ä¢ ${missingFieldNames}\n\nPode me dar essas informa√ß√µes?`;
      
      default:
        return `Para executar essa a√ß√£o, preciso de mais informa√ß√µes: ${missingFieldNames}. Por favor, preencha os campos faltantes.`;
    }
  }

  // ‚úÖ CORRE√á√ÉO: Melhorar detec√ß√£o de inten√ß√µes
  private fallbackIntentDetection(content: string): DetectedIntent {
    const lowerContent = content.toLowerCase();
    
    // ‚úÖ MELHORIA: Detec√ß√£o mais robusta e espec√≠fica de inten√ß√µes
    
    // Detectar cria√ß√£o de transa√ß√£o (PRIORIDADE ALTA)
    if (lowerContent.includes('criar transa√ß√£o') || lowerContent.includes('nova transa√ß√£o') || 
        lowerContent.includes('registrar transa√ß√£o') || lowerContent.includes('add transa√ß√£o') ||
        lowerContent.includes('quero criar uma nova transa√ß√£o') || lowerContent.includes('criar transa√ßao') ||
        lowerContent.includes('transa√ßao') || lowerContent.includes('transa√ß√£o') ||
        (lowerContent.includes('quero') && lowerContent.includes('transa√ß√£o')) ||
        (lowerContent.includes('preciso') && lowerContent.includes('transa√ß√£o')) ||
        (lowerContent.includes('gastei') && lowerContent.includes('reais')) ||
        (lowerContent.includes('paguei') && lowerContent.includes('reais')) ||
        (lowerContent.includes('comprei') && lowerContent.includes('reais'))) {
      
      // Extrair valor se mencionado
      const valorMatch = lowerContent.match(/(\d+(?:[.,]\d{2})?)\s*(?:reais?|r\$)/i);
      const valor = valorMatch ? parseFloat(valorMatch[1].replace(',', '.')) : undefined;
      
      // Extrair descri√ß√£o se mencionada
      const descricao = this.extractDescription(lowerContent);
      
      return {
        type: 'CREATE_TRANSACTION',
        payload: { valor, descricao },
        confidence: 0.95,
        reasoning: 'Detectado pedido de cria√ß√£o de transa√ß√£o',
        entities: { valor, descricao },
        response: 'Perfeito! Vou te ajudar a registrar essa transa√ß√£o! üí∞',
        requiresConfirmation: !valor || !descricao
      };
    }
    
    // Detectar cria√ß√£o de meta (PRIORIDADE ALTA)
    if (lowerContent.includes('criar meta') || lowerContent.includes('nova meta') || 
        lowerContent.includes('quero criar uma meta') || lowerContent.includes('quero juntar') ||
        lowerContent.includes('meta de') || lowerContent.includes('juntar dinheiro') ||
        (lowerContent.includes('quero') && lowerContent.includes('meta')) ||
        (lowerContent.includes('preciso') && lowerContent.includes('meta'))) {
      
      // Extrair valor se mencionado
      const valorMatch = lowerContent.match(/(\d+(?:[.,]\d{2})?)\s*(?:reais?|r\$)/i);
      const valor_total = valorMatch ? parseFloat(valorMatch[1].replace(',', '.')) : undefined;
      
      // Extrair objetivo se mencionado
      const meta = this.extractGoal(lowerContent);
      
      return {
        type: 'CREATE_GOAL',
        payload: { valor_total, meta },
        confidence: 0.9,
        reasoning: 'Detectado pedido de cria√ß√£o de meta',
        entities: { valor_total, meta },
        response: '√ìtimo! Vamos criar essa meta financeira! üéØ',
        requiresConfirmation: !valor_total || !meta
      };
    }
    
    // Detectar cria√ß√£o de investimento
    if (lowerContent.includes('criar investimento') || lowerContent.includes('novo investimento') || 
        lowerContent.includes('investir') || lowerContent.includes('comprar a√ß√µes') ||
        (lowerContent.includes('quero') && lowerContent.includes('investimento'))) {
      
      return {
        type: 'CREATE_INVESTMENT',
        payload: {},
        confidence: 0.85,
        reasoning: 'Detectado pedido de cria√ß√£o de investimento',
        entities: {},
        response: 'Excelente! Vamos registrar esse investimento! üìà',
        requiresConfirmation: true
      };
    }
    
    // ‚úÖ MELHORIA: Detectar sauda√ß√µes com respostas variadas
    if (lowerContent.includes('oi') || lowerContent.includes('ol√°') || lowerContent.includes('ola') ||
        lowerContent.includes('bom dia') || lowerContent.includes('boa tarde') || 
        lowerContent.includes('boa noite') || lowerContent.includes('tudo bem')) {
      
      const greetingResponses = [
        'Oi! Que bom te ver por aqui! üòä Como posso te ajudar hoje?',
        'Ol√°! Fico feliz que voc√™ tenha vindo! O que voc√™ gostaria de fazer?',
        'Oi! Tudo bem? Estou aqui pra te ajudar com suas finan√ßas!',
        'Ol√°! Que legal te ver! Como posso ser √∫til hoje?',
        'Oi! Bem-vindo de volta! O que voc√™ tem em mente?',
        'Ol√°! Fico animado quando voc√™ aparece! Como posso te ajudar?',
        'Oi! Que bom que voc√™ veio! O que voc√™ gostaria de fazer hoje?',
        'Ol√°! Estou aqui pra te ajudar! O que voc√™ tem em mente?'
      ];
      
      const randomResponse = greetingResponses[Math.floor(Math.random() * greetingResponses.length)];
      
      return {
        type: 'GREETING',
        payload: {},
        confidence: 0.95,
        reasoning: 'Detectada sauda√ß√£o',
        entities: {},
        response: randomResponse,
        requiresConfirmation: false
      };
    }
    
    // ‚úÖ MELHORIA: Detectar frustra√ß√£o e responder adequadamente
    if (lowerContent.includes('demora') || lowerContent.includes('lento') || lowerContent.includes('repetindo') || 
        lowerContent.includes('mesma coisa') || lowerContent.includes('n√£o sabe dialogar') ||
        lowerContent.includes('rob√≥tico') || lowerContent.includes('robotico')) {
      
      const frustrationResponses = [
        'Desculpa se estou sendo repetitivo! Vou tentar ser mais natural. O que voc√™ realmente gostaria de fazer?',
        'Entendo sua frustra√ß√£o! Vou ser mais direto. Como posso te ajudar de verdade?',
        'Pe√ßo desculpas! Vou ser mais humano. O que voc√™ precisa?',
        'Voc√™ tem raz√£o! Vou ser mais natural. O que voc√™ gostaria de fazer?',
        'Desculpa pela repeti√ß√£o! Vou ser mais direto. Como posso te ajudar?'
      ];
      
      const randomResponse = frustrationResponses[Math.floor(Math.random() * frustrationResponses.length)];
      
      return {
        type: 'FRUSTRATION',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectada frustra√ß√£o do usu√°rio',
        entities: {},
        response: randomResponse,
        requiresConfirmation: false
      };
    }
    
    // ‚úÖ MELHORIA: Detectar pedidos de ajuda com respostas variadas
    if (lowerContent.includes('ajuda') || lowerContent.includes('como funciona') || 
        lowerContent.includes('o que posso fazer') || lowerContent.includes('ajudar')) {
      
      const helpResponses = [
        'Claro! Estou aqui pra te ajudar com suas finan√ßas. Posso criar metas, registrar transa√ß√µes, analisar investimentos e muito mais! O que voc√™ gostaria de fazer?',
        'Beleza! Posso te ajudar com v√°rias coisas: criar metas, registrar gastos, analisar investimentos, dar dicas financeiras... O que te interessa?',
        'Tranquilo! Posso criar metas, registrar transa√ß√µes, analisar investimentos, dar conselhos financeiros... O que voc√™ tem em mente?',
        'Valeu! Posso te ajudar com metas, transa√ß√µes, investimentos, dicas financeiras... O que voc√™ gostaria de fazer?',
        'Show! Posso criar metas, registrar gastos, analisar investimentos, dar conselhos... O que voc√™ precisa?'
      ];
      
      const randomResponse = helpResponses[Math.floor(Math.random() * helpResponses.length)];
      
      return {
        type: 'GENERAL_HELP',
        payload: {},
        confidence: 0.9,
        reasoning: 'Detectado pedido de ajuda',
        entities: {},
        response: randomResponse,
        requiresConfirmation: false
      };
    }
    
    // ‚úÖ MELHORIA: Detectar confirma√ß√µes positivas
    if (lowerContent.includes('que √≥timo') || lowerContent.includes('que otimo') || 
        lowerContent.includes('legal') || lowerContent.includes('massa') || 
        lowerContent.includes('show') || lowerContent.includes('beleza') ||
        lowerContent.includes('valeu') || lowerContent.includes('obrigado') ||
        lowerContent.includes('obrigada')) {
      
      const confirmationResponses = [
        'Que bom que voc√™ gostou! O que mais posso fazer por voc√™?',
        'Fico feliz que tenha gostado! Tem mais alguma coisa que posso te ajudar?',
        'Show! Fico animado quando posso ajudar! O que voc√™ gostaria de fazer agora?',
        'Beleza! Que legal que foi √∫til! Tem mais alguma coisa em mente?',
        'Valeu! Fico feliz que tenha gostado! Como posso te ajudar mais?'
      ];
      
      const randomResponse = confirmationResponses[Math.floor(Math.random() * confirmationResponses.length)];
      
      return {
        type: 'CONFIRMATION',
        payload: {},
        confidence: 0.8,
        reasoning: 'Detectada confirma√ß√£o positiva',
        entities: {},
        response: randomResponse,
        requiresConfirmation: false
      };
    }
    
    // ‚úÖ MELHORIA: Padr√£o desconhecido com respostas variadas
    const unknownResponses = [
      'Entendi! Como posso te ajudar hoje? Posso criar metas, registrar transa√ß√µes, analisar investimentos ou responder suas d√∫vidas financeiras.',
      'Beleza! O que voc√™ gostaria de fazer? Posso te ajudar com metas, transa√ß√µes, investimentos ou qualquer d√∫vida financeira.',
      'Tranquilo! Como posso ser √∫til? Posso criar metas, registrar gastos, analisar investimentos ou dar conselhos financeiros.',
      'Valeu! O que voc√™ tem em mente? Posso te ajudar com metas, transa√ß√µes, investimentos ou dicas financeiras.',
      'Show! Como posso te ajudar? Posso criar metas, registrar transa√ß√µes, analisar investimentos ou responder suas perguntas.'
    ];
    
    const randomResponse = unknownResponses[Math.floor(Math.random() * unknownResponses.length)];
    
    return {
      type: 'UNKNOWN',
      payload: {},
      confidence: 0.3,
      reasoning: 'Inten√ß√£o desconhecida',
      entities: {},
      response: randomResponse,
      requiresConfirmation: false
    };
  }

  // ‚úÖ NOVO: Extrair descri√ß√£o da transa√ß√£o
  private extractDescription(content: string): string | undefined {
    // Remover palavras comuns e n√∫meros
    const cleanContent = content
      .replace(/\d+(?:[.,]\d{2})?\s*(?:reais?|r\$)/gi, '')
      .replace(/(criar|nova|transa√ß√£o|transa√ßao|quero|preciso|add|registrar)/gi, '')
      .trim();
    
    if (cleanContent.length > 3) {
      return cleanContent;
    }
    
    return undefined;
  }

  // ‚úÖ NOVO: Extrair objetivo da meta
  private extractGoal(content: string): string | undefined {
    // Buscar por padr√µes como "para viagem", "para carro", etc.
    const goalMatch = content.match(/(?:para|de|em)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s|$)/i);
    
    if (goalMatch && goalMatch[1].length > 2) {
      return goalMatch[1].trim();
    }
    
    return undefined;
  }

  private extractFinancialEntities(content: string, intent: DetectedIntent): any {
    const entities: any = {};
    
    // ‚úÖ CORRE√á√ÉO: Extrair valores monet√°rios mais robustamente
    const moneyMatches = content.match(/r?\$?\s*(\d+(?:[.,]\d+)?)/gi);
    if (moneyMatches) {
      const values = moneyMatches.map(match => 
        parseFloat(match.replace(/[r$\s]/gi, '').replace(',', '.'))
      );
      
      if (intent.type === 'CREATE_GOAL') {
        entities.valor_total = values[0];
      } else if (intent.type === 'CREATE_INVESTMENT') {
        entities.valor = values[0];
      } else if (intent.type === 'CREATE_TRANSACTION') {
        entities.valor = values[0];
      }
    }
    
    // ‚úÖ CORRE√á√ÉO: Extrair datas mais robustamente
    const dateMatches = content.match(/(\d{1,2}\/\d{1,2}\/\d{4}|\d{4}-\d{2}-\d{2})/g);
    if (dateMatches) {
      entities.data_conclusao = dateMatches[0];
    }
    
    // ‚úÖ CORRE√á√ÉO: Extrair nome da meta
    if (intent.type === 'CREATE_GOAL') {
      // Procurar por padr√µes como "nome da meta", "meta de", "para"
      const metaPatterns = [
        /nome da meta\s+([^.]+)/i,
        /meta\s+(?:de\s+)?([^.]+?)(?:\s+para|\s+at√©|$)/i,
        /juntar.*?para\s+([^.]+)/i,
        /economizar.*?para\s+([^.]+)/i
      ];
      
      for (const pattern of metaPatterns) {
        const match = content.match(pattern);
        if (match && match[1]) {
          entities.meta = match[1].trim();
          break;
        }
      }
      
      // Se n√£o encontrou com padr√µes, procurar por palavras ap√≥s "meta"
      if (!entities.meta) {
        const metaIndex = content.toLowerCase().indexOf('meta');
        if (metaIndex !== -1) {
          const afterMeta = content.substring(metaIndex + 4).trim();
          const words = afterMeta.split(/\s+/);
          if (words.length > 0 && words[0].length > 2) {
            entities.meta = words[0];
          }
        }
      }
    }
    
    // ‚úÖ CORRE√á√ÉO: Extrair descri√ß√µes para transa√ß√µes
    if (intent.type === 'CREATE_TRANSACTION') {
      const descriptionKeywords = ['para', 'comprar', 'gastei em', 'paguei'];
    for (const keyword of descriptionKeywords) {
      const index = content.toLowerCase().indexOf(keyword);
      if (index !== -1) {
        const description = content.substring(index + keyword.length).trim();
        if (description.length > 3) {
          entities.descricao = description;
            break;
          }
        }
      }
    }
    
    // ‚úÖ CORRE√á√ÉO: Extrair tipo de transa√ß√£o
    if (intent.type === 'CREATE_TRANSACTION') {
      const lowerContent = content.toLowerCase();
      if (lowerContent.includes('gastei') || lowerContent.includes('paguei') || lowerContent.includes('comprei')) {
        entities.tipo = 'despesa';
      } else if (lowerContent.includes('recebi') || lowerContent.includes('ganhei')) {
        entities.tipo = 'receita';
      }
    }
    
    // ‚úÖ CORRE√á√ÉO: Extrair nome do investimento
    if (intent.type === 'CREATE_INVESTMENT') {
      const investmentPatterns = [
        /investir\s+(?:em\s+)?([^.]+)/i,
        /aplicar\s+(?:em\s+)?([^.]+)/i,
        /a√ß√µes\s+(?:da\s+)?([^.]+)/i
      ];
      
      for (const pattern of investmentPatterns) {
        const match = content.match(pattern);
        if (match && match[1]) {
          entities.nome = match[1].trim();
          break;
        }
      }
    }
    
    return entities;
  }

  private checkConsistency(intent: DetectedIntent, entities: any, context: ConversationContext): any {
    const issues: string[] = [];
    const warnings: string[] = [];
    
    // Verificar se o valor √© razo√°vel
    if (entities.valor && entities.valor > 1000000) {
      warnings.push('Valor muito alto detectado');
    }
    
    // Verificar se h√° conflito com metas existentes
    if (intent.type === 'CREATE_GOAL' && context.financialContext.goals) {
      const totalGoals = context.financialContext.totalGoals + (entities.valor_total || 0);
      const monthlyIncome = context.financialContext.totalEarned;
      
      if (totalGoals > monthlyIncome * 12) {
        warnings.push('Total de metas pode ser muito alto para sua renda');
      }
    }
    
    // Verificar se h√° dinheiro suficiente para investimento
    if (intent.type === 'CREATE_INVESTMENT' && entities.valor) {
      const availableFunds = context.financialContext.totalEarned - context.financialContext.totalSpent;
      if (entities.valor > availableFunds) {
        issues.push('Valor do investimento maior que fundos dispon√≠veis');
      }
    }
    
    return { issues, warnings, isConsistent: issues.length === 0 };
  }

  private async planResponse(intent: DetectedIntent, entities: any, consistencyCheck: any, context: ConversationContext): Promise<any> {
    let response = '';
    let action = null;
    
    // Gerar resposta baseada na inten√ß√£o
    switch (intent.type) {
      case 'CREATE_GOAL':
        response = this.generateGoalResponse(entities, context);
        action = {
          type: 'CREATE_GOAL',
          payload: entities,
          confidence: intent.confidence
        };
        break;
        
      case 'CREATE_INVESTMENT':
        response = this.generateInvestmentResponse(entities, context);
        action = {
          type: 'CREATE_INVESTMENT',
          payload: entities,
          confidence: intent.confidence
        };
        break;
        
      case 'CREATE_TRANSACTION':
        response = this.generateTransactionResponse(entities, context);
        action = {
          type: 'CREATE_TRANSACTION',
          payload: entities,
          confidence: intent.confidence
        };
        break;
        
      case 'ANALYZE_DATA':
        response = this.generateAnalysisResponse(context);
        action = {
          type: 'ANALYZE_DATA',
          payload: { analysisType: 'comprehensive' },
          confidence: intent.confidence
        };
        break;
        
      default:
        response = this.generateGeneralResponse(intent, context);
    }
    
    // Adicionar avisos de consist√™ncia
    if (consistencyCheck.warnings.length > 0) {
      response += `\n\n‚ö†Ô∏è ${consistencyCheck.warnings.join(', ')}`;
    }
    
    return { text: response, action };
  }

  private generateGoalResponse(entities: any, context: ConversationContext): string {
    const userName = context.userProfile.name || 'voc√™';
    const amount = entities.valor_total;
    const description = entities.meta || 'sua meta';
    const date = entities.data_conclusao;
    
    if (amount && description) {
      let response = `üéØ Perfeito, ${userName}! Vou criar uma meta de R$ ${amount.toFixed(2)} para ${description}`;
      
      if (date) {
        response += ` at√© ${date}`;
      }
      
      response += `. Considerando sua situa√ß√£o financeira atual, essa meta parece bem alinhada com suas possibilidades.`;
      
      // Adicionar dica personalizada
      const monthlyAmount = amount / 12; // Assumindo 12 meses
      if (monthlyAmount > 100) {
        response += `\n\nüí° Dica: Para atingir essa meta, voc√™ precisar√° economizar aproximadamente R$ ${monthlyAmount.toFixed(2)} por m√™s.`;
      }
      
      return response;
    } else if (description) {
      return `üéØ Que legal, ${userName}! Vamos criar uma meta para ${description}. Qual valor voc√™ gostaria de juntar?`;
    } else {
      return `üéØ √ìtimo, ${userName}! Vamos criar uma nova meta. Qual √© o objetivo e quanto voc√™ quer juntar?`;
    }
  }

  private generateInvestmentResponse(entities: any, context: ConversationContext): string {
    const userName = context.userProfile.name || 'voc√™';
    const amount = entities.valor;
    const name = entities.nome || 'seu investimento';
    
    if (amount && name) {
      return `üìà Excelente decis√£o, ${userName}! Vou registrar um investimento de R$ ${amount.toFixed(2)} em ${name}. Baseado no seu perfil ${context.userProfile.riskProfile}, posso sugerir algumas estrat√©gias de diversifica√ß√£o.`;
    } else if (amount) {
      return `üìà √ìtimo, ${userName}! Vou registrar um investimento de R$ ${amount.toFixed(2)}. Em qual tipo de investimento voc√™ aplicou?`;
    } else {
      return `üìà Perfeito, ${userName}! Vamos registrar seu investimento. Qual valor voc√™ investiu e em que tipo de aplica√ß√£o?`;
    }
  }

  private generateTransactionResponse(entities: any, context: ConversationContext): string {
    const userName = context.userProfile.name || 'voc√™';
    const amount = entities.valor;
    const description = entities.descricao || 'sua transa√ß√£o';
    const tipo = entities.tipo || 'transa√ß√£o';
    
    if (amount && description) {
      return `üí∞ Entendi, ${userName}! Vou registrar uma ${tipo} de R$ ${amount.toFixed(2)} para ${description}. Isso vai ajudar a manter seu controle financeiro em dia.`;
    } else if (amount) {
      return `üí∞ Perfeito, ${userName}! Vou registrar uma ${tipo} de R$ ${amount.toFixed(2)}. O que foi essa transa√ß√£o?`;
    } else {
      return `üí∞ Beleza, ${userName}! Vamos registrar sua ${tipo}. Qual foi o valor e o que foi?`;
    }
  }

  private generateAnalysisResponse(context: ConversationContext): string {
    const userName = context.userProfile.name || 'voc√™';
    const savingsRate = context.financialContext.savingsRate;
    const investmentRate = context.financialContext.investmentRate;
    
    return `üìä ${userName}, analisando sua situa√ß√£o financeira atual:
‚Ä¢ Taxa de poupan√ßa: ${savingsRate.toFixed(1)}%
‚Ä¢ Taxa de investimento: ${investmentRate.toFixed(1)}%
‚Ä¢ Total investido: R$ ${context.financialContext.totalInvested.toFixed(2)}

${savingsRate < 20 ? 'üí° Sugest√£o: Considere aumentar sua taxa de poupan√ßa para pelo menos 20%' : '‚úÖ Sua taxa de poupan√ßa est√° em um bom n√≠vel!'}`;
  }

  private generateGeneralResponse(intent: DetectedIntent, context: ConversationContext): string {
    const userName = context.userProfile.name || 'voc√™';
    
    // ‚úÖ CORRE√á√ÉO: Respostas mais espec√≠ficas e √∫teis baseadas na inten√ß√£o
    switch (intent.type) {
      case 'GREETING':
        return `Ol√° ${userName}! Que bom te ver por aqui! üòä Como posso te ajudar hoje? Posso criar metas, registrar transa√ß√µes, analisar investimentos ou responder suas d√∫vidas financeiras.`;
      
      case 'GENERAL_HELP':
        return `Claro, ${userName}! Estou aqui para te ajudar com suas finan√ßas. Posso:
‚Ä¢ üéØ Criar metas de economia
‚Ä¢ üí∞ Registrar transa√ß√µes
‚Ä¢ üìà Analisar investimentos
‚Ä¢ üìä Gerar relat√≥rios
‚Ä¢ üí° Dar dicas personalizadas

O que voc√™ gostaria de fazer?`;
      
      case 'CREATE_TRANSACTION':
        return `Perfeito! Vou te ajudar a criar uma nova transa√ß√£o. üí∞

Para registrar sua transa√ß√£o, preciso de algumas informa√ß√µes:
‚Ä¢ Qual foi o valor?
‚Ä¢ O que foi essa transa√ß√£o? (ex: compra, pagamento, recebimento)
‚Ä¢ √â uma receita ou despesa?

Pode me passar essas informa√ß√µes?`;
      
      case 'CREATE_GOAL':
        return `√ìtimo! Vamos criar uma meta financeira! üéØ

Para criar sua meta, preciso saber:
‚Ä¢ Qual valor voc√™ quer juntar?
‚Ä¢ Para qual objetivo? (ex: viagem, carro, casa)
‚Ä¢ Em quanto tempo quer alcan√ßar?

Me conta um pouco sobre sua meta!`;
      
      case 'CREATE_INVESTMENT':
        return `Excelente! Vamos registrar seu investimento! üìà

Para cadastrar seu investimento, preciso de:
‚Ä¢ Qual valor voc√™ investiu?
‚Ä¢ Em que tipo de investimento? (ex: a√ß√µes, fundos, CDB)
‚Ä¢ Qual institui√ß√£o?

Pode me passar essas informa√ß√µes?`;
      
      case 'ANALYZE_DATA':
        return `Claro! Vou analisar seus dados financeiros! üìä

Posso te mostrar:
‚Ä¢ Resumo das suas transa√ß√µes
‚Ä¢ Performance dos investimentos
‚Ä¢ Progresso das metas
‚Ä¢ Dicas personalizadas

O que voc√™ gostaria de ver primeiro?`;
      
      case 'CONFIRMATION':
        return `Perfeito! Vamos continuar ent√£o! üëç

O que voc√™ gostaria de fazer agora?`;
      
      case 'DENIAL':
        return `Entendi! Sem problemas! üòä

Como posso te ajudar de outra forma?`;
      
      case 'CORRECTION':
        return `Claro! Vamos corrigir isso! üîß

Me fala o que precisa ser ajustado.`;
      
      case 'FRUSTRATION':
        return `Entendo sua frustra√ß√£o, ${userName}! üòî Pe√ßo desculpas pela confus√£o.

Vou te ajudar de forma mais direta e clara. O que voc√™ precisa fazer agora? Estou aqui para te auxiliar!`;
      
      default:
    return `Ol√° ${userName}! Como posso te ajudar hoje? Posso criar metas, registrar transa√ß√µes, analisar investimentos ou responder suas d√∫vidas financeiras.`;
    }
  }

  private determineConfirmationNeed(intent: DetectedIntent, entities: any, context: ConversationContext): boolean {
    // Precisa de confirma√ß√£o se:
    // 1. √â uma a√ß√£o de cria√ß√£o com dados suficientes
    // 2. O valor √© alto (> R$ 1000)
    // 3. √â a primeira vez que o usu√°rio faz esse tipo de a√ß√£o
    
    const isCreationAction = ['CREATE_GOAL', 'CREATE_INVESTMENT', 'CREATE_TRANSACTION'].includes(intent.type);
    const hasSufficientData = Object.keys(entities).length >= 2;
    const isHighValue = entities.valor > 1000 || entities.valor_total > 1000;
    
    return isCreationAction && hasSufficientData && isHighValue;
  }
} 